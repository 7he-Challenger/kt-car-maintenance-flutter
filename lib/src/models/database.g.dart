// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Vehicle.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Vehicle TABLE
class TableVehicle extends SqfEntityTableBase {
  TableVehicle() {
    // declare properties of EntityTable
    tableName = 'vehicles';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('brands', DbType.text),
      SqfEntityFieldBase('matricule', DbType.text),
      SqfEntityFieldBase('image', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVehicle();
  }
}

// Maintenance TABLE
class TableMaintenance extends SqfEntityTableBase {
  TableMaintenance() {
    // declare properties of EntityTable
    tableName = 'maintenances';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TableVehicle.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'idVehicle'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMaintenance();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyVehicle extends SqfEntityModelProvider {
  MyVehicle() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableVehicle.getInstance,
      TableMaintenance.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Vehicle
class Vehicle extends TableBase {
  Vehicle({this.id, this.name, this.brands, this.matricule, this.image}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Vehicle.withFields(this.name, this.brands, this.matricule, this.image) {
    _setDefaultValues();
  }
  Vehicle.withId(this.id, this.name, this.brands, this.matricule, this.image) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Vehicle.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['brands'] != null) {
      brands = o['brands'].toString();
    }
    if (o['matricule'] != null) {
      matricule = o['matricule'].toString();
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
  }
  // FIELDS (Vehicle)
  int? id;
  String? name;
  String? brands;
  String? matricule;
  String? image;

  // end FIELDS (Vehicle)

// COLLECTIONS & VIRTUALS (Vehicle)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plMaintenances', 'plField2'..]) or so on..
  List<Maintenance>? plMaintenances;

  /// get Maintenance(s) filtered by id=idVehicle
  MaintenanceFilterBuilder? getMaintenances(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Maintenance()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .idVehicle
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Vehicle)

  static const bool _softDeleteActivated = false;
  VehicleManager? __mnVehicle;

  VehicleManager get _mnVehicle {
    return __mnVehicle = __mnVehicle ?? VehicleManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (brands != null || !forView) {
      map['brands'] = brands;
    }
    if (matricule != null || !forView) {
      map['matricule'] = matricule;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (brands != null || !forView) {
      map['brands'] = brands;
    }
    if (matricule != null || !forView) {
      map['matricule'] = matricule;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }

// COLLECTIONS (Vehicle)
    if (!forQuery) {
      map['Maintenances'] = await getMaintenances()!.toMapList();
    }
// END COLLECTIONS (Vehicle)

    return map;
  }

  /// This method returns Json String [Vehicle]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Vehicle]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, brands, matricule, image];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, brands, matricule, image];
  }

  static Future<List<Vehicle>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Vehicle.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Vehicle>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Vehicle>[];
    try {
      objList = list
          .map((vehicle) => Vehicle.fromMap(vehicle as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Vehicle.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Vehicle>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Vehicle> objList = <Vehicle>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Vehicle.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('vehicles.plMaintenances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plMaintenances'))) {
          /*_loadedfields!.add('vehicles.plMaintenances'); */ obj
                  .plMaintenances =
              obj.plMaintenances ??
                  await obj.getMaintenances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Vehicle by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Vehicle] if exist, otherwise returns null
  Future<Vehicle?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Vehicle? obj;
    final data = await _mnVehicle.getById([id]);
    if (data.length != 0) {
      obj = Vehicle.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('vehicles.plMaintenances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plMaintenances'))) {
          /*_loadedfields!.add('vehicles.plMaintenances'); */ obj
                  .plMaintenances =
              obj.plMaintenances ??
                  await obj.getMaintenances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Vehicle) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnVehicle.insert(this, ignoreBatch);
    } else {
      await _mnVehicle.update(this);
    }

    return id;
  }

  /// Saves the (Vehicle) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnVehicle.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnVehicle.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Vehicle. Returns a new Primary Key value of Vehicle

  /// <returns>Returns a new Primary Key value of Vehicle
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Vehicle> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Vehicle> vehicles,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyVehicle().batchStart();
    for (final obj in vehicles) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyVehicle().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < vehicles.length; i++) {
        if (vehicles[i].id == null) {
          vehicles[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnVehicle.rawInsert(
          'INSERT OR REPLACE INTO vehicles (id, name, brands, matricule, image)  VALUES (?,?,?,?,?)',
          [id, name, brands, matricule, image],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Vehicle id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Vehicle id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Vehicle Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Vehicle>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Vehicle> vehicles,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnVehicle.rawInsertAll(
        'INSERT OR REPLACE INTO vehicles (id, name, brands, matricule, image)  VALUES (?,?,?,?,?)',
        vehicles,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Vehicle

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Vehicle invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Maintenance()
          .select()
          .idVehicle
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnVehicle
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnVehicle.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Vehicle] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  VehicleFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return VehicleFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  VehicleFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return VehicleFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion vehicle

// region VehicleField
class VehicleField extends FilterBase {
  VehicleField(VehicleFilterBuilder vehicleFB) : super(vehicleFB);

  @override
  VehicleFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder isNull() {
    return super.isNull() as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as VehicleFilterBuilder;
  }

  @override
  VehicleField get not {
    return super.not as VehicleField;
  }
}
// endregion VehicleField

// region VehicleFilterBuilder
class VehicleFilterBuilder extends ConjunctionBase {
  VehicleFilterBuilder(Vehicle obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnVehicle = obj._mnVehicle;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  VehicleManager? _mnVehicle;

  /// put the sql keyword 'AND'
  @override
  VehicleFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  VehicleFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  VehicleFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  VehicleFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  VehicleFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  VehicleFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  VehicleFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  VehicleFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  VehicleFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  VehicleFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  VehicleFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  VehicleField _setField(VehicleField? field, String colName, DbType dbtype) {
    return VehicleField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  VehicleField? _id;
  VehicleField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  VehicleField? _name;
  VehicleField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  VehicleField? _brands;
  VehicleField get brands {
    return _brands = _setField(_brands, 'brands', DbType.text);
  }

  VehicleField? _matricule;
  VehicleField get matricule {
    return _matricule = _setField(_matricule, 'matricule', DbType.text);
  }

  VehicleField? _image;
  VehicleField get image {
    return _image = _setField(_image, 'image', DbType.text);
  }

  /// Deletes List<Vehicle> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Maintenance) according to DeleteRule.CASCADE
    final idListMaintenanceBYidVehicle = toListPrimaryKeySQL(false);
    final resMaintenanceBYidVehicle = await Maintenance()
        .select()
        .where('idVehicle IN (${idListMaintenanceBYidVehicle['sql']})',
            parameterValue: idListMaintenanceBYidVehicle['args'])
        .delete(hardDelete);
    if (!resMaintenanceBYidVehicle.success) {
      return resMaintenanceBYidVehicle;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnVehicle!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnVehicle!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from vehicles ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnVehicle!.updateBatch(qparams, values);
  }

  /// This method always returns [Vehicle] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Vehicle?
  @override
  Future<Vehicle?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnVehicle!.toList(qparams);
    final data = await objFuture;
    Vehicle? obj;
    if (data.isNotEmpty) {
      obj = Vehicle.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('vehicles.plMaintenances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plMaintenances'))) {
          /*_loadedfields!.add('vehicles.plMaintenances'); */ obj
                  .plMaintenances =
              obj.plMaintenances ??
                  await obj.getMaintenances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Vehicle]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Vehicle?
  @override
  Future<Vehicle> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Vehicle();
  }

  /// This method returns int. [Vehicle]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? vehicleCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final vehiclesFuture = await _mnVehicle!.toList(qparams);
    final int count = vehiclesFuture[0]['CNT'] as int;
    if (vehicleCount != null) {
      vehicleCount(count);
    }
    return count;
  }

  /// This method returns List<Vehicle> [Vehicle]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Vehicle>
  @override
  Future<List<Vehicle>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Vehicle> vehiclesData = await Vehicle.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return vehiclesData;
  }

  /// This method returns Json String [Vehicle]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Vehicle]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Vehicle]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnVehicle!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Vehicle]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM vehicles WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnVehicle!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Vehicle]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnVehicle!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Vehicle.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnVehicle!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VehicleFilterBuilder

// region VehicleFields
class VehicleFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fBrands;
  static TableField get brands {
    return _fBrands =
        _fBrands ?? SqlSyntax.setField(_fBrands, 'brands', DbType.text);
  }

  static TableField? _fMatricule;
  static TableField get matricule {
    return _fMatricule = _fMatricule ??
        SqlSyntax.setField(_fMatricule, 'matricule', DbType.text);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }
}
// endregion VehicleFields

//region VehicleManager
class VehicleManager extends SqfEntityProvider {
  VehicleManager()
      : super(MyVehicle(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'vehicles';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion VehicleManager
// region Maintenance
class Maintenance extends TableBase {
  Maintenance({this.id, this.date, this.idVehicle}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Maintenance.withFields(this.date, this.idVehicle) {
    _setDefaultValues();
  }
  Maintenance.withId(this.id, this.date, this.idVehicle) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Maintenance.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    idVehicle = int.tryParse(o['idVehicle'].toString());

    // RELATIONSHIPS FromMAP
    plVehicle = o['vehicle'] != null
        ? Vehicle.fromMap(o['vehicle'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Maintenance)
  int? id;
  DateTime? date;
  int? idVehicle;

  // end FIELDS (Maintenance)

// RELATIONSHIPS (Maintenance)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plVehicle', 'plField2'..]) or so on..
  Vehicle? plVehicle;

  /// get Vehicle By IdVehicle
  Future<Vehicle?> getVehicle(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Vehicle().getById(idVehicle,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Maintenance)

  static const bool _softDeleteActivated = false;
  MaintenanceManager? __mnMaintenance;

  MaintenanceManager get _mnMaintenance {
    return __mnMaintenance = __mnMaintenance ?? MaintenanceManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (idVehicle != null) {
      map['idVehicle'] = forView
          ? plVehicle == null
              ? idVehicle
              : plVehicle!.name
          : idVehicle;
    } else if (idVehicle != null || !forView) {
      map['idVehicle'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (idVehicle != null) {
      map['idVehicle'] = forView
          ? plVehicle == null
              ? idVehicle
              : plVehicle!.name
          : idVehicle;
    } else if (idVehicle != null || !forView) {
      map['idVehicle'] = null;
    }

    return map;
  }

  /// This method returns Json String [Maintenance]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Maintenance]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [date != null ? date!.millisecondsSinceEpoch : null, idVehicle];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, date != null ? date!.millisecondsSinceEpoch : null, idVehicle];
  }

  static Future<List<Maintenance>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Maintenance.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Maintenance>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Maintenance>[];
    try {
      objList = list
          .map((maintenance) =>
              Maintenance.fromMap(maintenance as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Maintenance.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Maintenance>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Maintenance> objList = <Maintenance>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Maintenance.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVehicle'))) {
          obj.plVehicle =
              obj.plVehicle ?? await obj.getVehicle(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Maintenance by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Maintenance] if exist, otherwise returns null
  Future<Maintenance?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Maintenance? obj;
    final data = await _mnMaintenance.getById([id]);
    if (data.length != 0) {
      obj = Maintenance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVehicle'))) {
          obj.plVehicle =
              obj.plVehicle ?? await obj.getVehicle(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Maintenance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMaintenance.insert(this, ignoreBatch);
    } else {
      await _mnMaintenance.update(this);
    }

    return id;
  }

  /// Saves the (Maintenance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMaintenance.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMaintenance.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Maintenance. Returns a new Primary Key value of Maintenance

  /// <returns>Returns a new Primary Key value of Maintenance
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Maintenance> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Maintenance> maintenances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyVehicle().batchStart();
    for (final obj in maintenances) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyVehicle().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < maintenances.length; i++) {
        if (maintenances[i].id == null) {
          maintenances[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMaintenance.rawInsert(
          'INSERT OR REPLACE INTO maintenances (id, date, idVehicle)  VALUES (?,?,?)',
          [id, date != null ? date!.millisecondsSinceEpoch : null, idVehicle],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Maintenance id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Maintenance id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Maintenance Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Maintenance>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Maintenance> maintenances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnMaintenance.rawInsertAll(
        'INSERT OR REPLACE INTO maintenances (id, date, idVehicle)  VALUES (?,?,?)',
        maintenances,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Maintenance

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Maintenance invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMaintenance
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMaintenance.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Maintenance] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MaintenanceFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MaintenanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MaintenanceFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MaintenanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion maintenance

// region MaintenanceField
class MaintenanceField extends FilterBase {
  MaintenanceField(MaintenanceFilterBuilder maintenanceFB)
      : super(maintenanceFB);

  @override
  MaintenanceFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder isNull() {
    return super.isNull() as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MaintenanceFilterBuilder;
  }

  @override
  MaintenanceField get not {
    return super.not as MaintenanceField;
  }
}
// endregion MaintenanceField

// region MaintenanceFilterBuilder
class MaintenanceFilterBuilder extends ConjunctionBase {
  MaintenanceFilterBuilder(Maintenance obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMaintenance = obj._mnMaintenance;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MaintenanceManager? _mnMaintenance;

  /// put the sql keyword 'AND'
  @override
  MaintenanceFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MaintenanceFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MaintenanceFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MaintenanceFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MaintenanceFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MaintenanceFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MaintenanceFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MaintenanceFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MaintenanceFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MaintenanceFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MaintenanceFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MaintenanceField _setField(
      MaintenanceField? field, String colName, DbType dbtype) {
    return MaintenanceField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MaintenanceField? _id;
  MaintenanceField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MaintenanceField? _date;
  MaintenanceField get date {
    return _date = _setField(_date, 'date', DbType.datetime);
  }

  MaintenanceField? _idVehicle;
  MaintenanceField get idVehicle {
    return _idVehicle = _setField(_idVehicle, 'idVehicle', DbType.integer);
  }

  /// Deletes List<Maintenance> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMaintenance!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMaintenance!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from maintenances ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMaintenance!.updateBatch(qparams, values);
  }

  /// This method always returns [Maintenance] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Maintenance?
  @override
  Future<Maintenance?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMaintenance!.toList(qparams);
    final data = await objFuture;
    Maintenance? obj;
    if (data.isNotEmpty) {
      obj = Maintenance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plVehicle'))) {
          obj.plVehicle =
              obj.plVehicle ?? await obj.getVehicle(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Maintenance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Maintenance?
  @override
  Future<Maintenance> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Maintenance();
  }

  /// This method returns int. [Maintenance]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? maintenanceCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final maintenancesFuture = await _mnMaintenance!.toList(qparams);
    final int count = maintenancesFuture[0]['CNT'] as int;
    if (maintenanceCount != null) {
      maintenanceCount(count);
    }
    return count;
  }

  /// This method returns List<Maintenance> [Maintenance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Maintenance>
  @override
  Future<List<Maintenance>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Maintenance> maintenancesData = await Maintenance.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return maintenancesData;
  }

  /// This method returns Json String [Maintenance]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Maintenance]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Maintenance]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMaintenance!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Maintenance]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM maintenances WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMaintenance!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Maintenance]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMaintenance!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Maintenance.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMaintenance!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MaintenanceFilterBuilder

// region MaintenanceFields
class MaintenanceFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetime);
  }

  static TableField? _fIdVehicle;
  static TableField get idVehicle {
    return _fIdVehicle = _fIdVehicle ??
        SqlSyntax.setField(_fIdVehicle, 'idVehicle', DbType.integer);
  }
}
// endregion MaintenanceFields

//region MaintenanceManager
class MaintenanceManager extends SqfEntityProvider {
  MaintenanceManager()
      : super(MyVehicle(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'maintenances';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MaintenanceManager
class MyVehicleSequenceManager extends SqfEntityProvider {
  MyVehicleSequenceManager() : super(MyVehicle());
}
// END OF ENTITIES
